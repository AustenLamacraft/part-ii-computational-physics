{"title":"Course outline","markdown":{"headingText":"Course outline","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\nThese are the materials for the Part II Physics course Computational Physics, taught in Lent Term 2023 at the University of Cambridge. \n\n## Schedule\n\nThe course of eight Lectures will take place at 10.00 on Mondays and Fridays in the Pippard Lecture Theatre. After the lectures there will be __four computing exercises__ to be completed in the last four weeks of full Lent term; one per week. The exercises count for 0.2 units or further work, or roughly 2% of your final mark for the year. Thus each exercise should only take you a few hours. \n\nThe schedule is as follows\n\n- First lecture: Monday 23th January\n- Last lecture: Friday 17th February\n- First exercise: Friday 17th February – Friday 24th February\n- Second exercise: Friday 24th February – Friday 3rd March\n- Third exercise: Friday 3rd March – Friday 10th March\n- Fourth exercise: Friday 10th March – Friday 17th March (last day of full Lent term)\n\n### Computing Project\n\nAdditionally, you may choose to offer a Computational Physics project for one unit of further work. This involves choosing a problem from the project list. You will analyse the problem, write and test Python code to investigate it, then write up your work in a report. \n\nStudents may start their project work once the project list is published by 17th February. The deadline for submission of the project report is __16:00 on the first Monday of Full Easter term (1st May 2023)__.\n\n## Prerequisites\n\nThis course assumes a basic knowledge of the Python language, including variables, control flow, and writing and using functions, at the level of last year's IB course (which had an excellent handout). \n\nIf you want an absolute bare bones intro to Python try the first half of [this tutorial](https://cs231n.github.io/python-numpy-tutorial/) (which then goes on to introduce NumPy).\n\n## Learning outcomes\n\nIn this course you will learn\n\n1. About the Python scientific stack (based on the NumPy library)\n2. Its use in implementing some common algorithms in computational physics.\n3. Basic ideas of computational complexity used in the analysis of algorithms\n\n## Outline \n\nHere's a list of topics that I'd like to cover. We make not have time for all of them.\n\n1. Setup. Running Python. Notebooks. Language overview\n2. NumPy and friends\n3. Floating point and all that\n4. Soving differential equations with SciPy\n5. Monte Carlo methods\n6. Introduction to algorithms and complexity\n7. The fast Fourier transform\n8. Linear algebra with NumPy\n9. Automatic differentiation \n\n<!-- 4. Numerical algos. SciPy\n5. Other libraries. Pandas and scikit-learn. Kaggle\n6. Algorithms and complexity. Simple Examples. FFT? Importance of...(see https://ieeexplore.ieee.org/document/814652). Matrix multiplication. Strassen and Alpha Tensor. Nice discussion in Nature of Computation\n7. Types of algorithm e.g. divide and conquer, dynamic programming (at level of grokking algos book). Recursion. \n8. Random algorithms e.g. Monte Carlo. Inference.\n9. Fun. Machine learning. Diffusion models\n10. Software engineering principles. Version control. Tests\n11. Acceleration. Numba, CuPy, etc. -->\n\n<!-- Trebst's applications:\nODE, Monte Carlo simulation, data analysis, QM scattering, Linear algebra, Neural Nets\n\nRefer to French book for more examples.\n\nPCA as application of linear algebra and quantum mechanics\n\nRandom matrix theory\nLinear regression\n\nLinear programming.\n\nFFT invented before Fourier\n\nGarth Wells has nice material about algos and complexity\nhttps://github.com/CambridgeEngineering/PartIA-Computing-Michaelmas/\n\nHashing\n\nBooks\n\nPart IB notes are very good\n\nGarth Wells\n\nhttps://github.com/CambridgeEngineering/PartIA-Computing-Michaelmas/\n\nRougier\n\nhttps://www.labri.fr/perso/nrougier/from-python-to-numpy/\nhttps://github.com/rougier/scientific-visualization-book\n\n\nNumpy. Basics of ufuncs and vectorization \n2. Loading and saving data\n3. Data types. Floating point. Machine precision\n4. Implementing algos using vectorization (ODEs)\n5. Numerical techniques: ODS, optimization\n6. Computational complexity\n\t1. Complexity of simple algos. Division algorithm as binary search (Ryan O'Donnell tweet)\n\t2. Euler algorithm\n\t3. Complexity of linear algebra operations. Matrix-matrix and matrix-vector. Solving equations can be easier if matrices have structure see e.g. https://martin-thoma.com/solving-equations-of-upper-triangular-matrices/. This is forward   / backward substitution. \n\t4. Strategies: divide and conquer (examples: exponentiation, Strassen, FFT)\n\t5. Monte Carlo and probabilistic methods\n\t6. Dynamic programming\n7. Version control. GitHub. Pull requests. Code review. Look up some code in `scipy` -->\n\n## These notes...\n\n...were prepared using [Quarto](https://quarto.org/). Each chapter should be thought of as a Jupyter notebook (actually, they _are_ Jupyter notebooks), so you'll probably only see `import numpy as np` once in each chapter, for example. \n\nThe code used to generate this site is in [this GitHub repo](https://github.com/AustenLamacraft/part-ii-computational-physics). Please use [issues](https://github.com/AustenLamacraft/part-ii-computational-physics/issues) to submit any typos and [discussions](https://github.com/AustenLamacraft/part-ii-computational-physics/discussions) to discuss the content.\n\nIn several places I've used examples from an earlier version of the course by David Buscher.\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.280","bibliography":["references.bib"],"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}}}