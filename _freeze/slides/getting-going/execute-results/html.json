{
  "hash": "3f0c22e255acc0d092a742ee207d5693",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Getting going\nnumber-sections: false\nformat:\n  revealjs: \n    theme: [default, reveal_custom.scss]\n    slide-number: true\n    hash: true\n    center: true\n    auto-stretch: false\n    html-math-method: mathjax\n    preview-links: true\n---\n\n\n\n\n# Big questions...\n\n---\n\n## Biggest...\n\n- Are physical processes _really_ the same things as computations?\n\n![](../assets/simulation.jpg){fig-align=\"center\"}\n\n- Are all processes that happen in the physical universe computable _in principal_ (perhaps on a quantum computer)? \n\n- This is the [(physical) Church–Turing thesis](https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis#Variations)\n\n---\n\n## Big...\n\n- What computations can we do with finite resources including time and space (memory)\n\n- How _hard_ — or _complex_ — are the computational tasks we wish to perform? Can we quantify this?\n\n---\n\n## Important...\n\n- You know many _mathematical problems_ that arise in the course of doing physics (e.g. solving a differential equation)\n\n  - How can we solve these problems in an efficient way on a computer in situations where no analytic solution is available?\n  - How to represent and operate on the kind of data we encounter in physics (trajectories $\\mathbf{x}(t)$, fields $\\mathbf{E}(\\mathbf{r},t)$, etc.)?\n\n---\n\n## Really important...\n\n- How do I start Python?\n\n---\n\n## Goals\n\nIn this course you will learn\n\n1. About the Python scientific stack (based on NumPy)\n2. Its use in implementing some common algorithms in computational physics\n3. Basic ideas of computational complexity used in the analysis of algorithms\n\n---\n\n## Prerequisites\n\n- Assume a knowledge of the Python language, including variables, control flow, and writing and using functions\n\n- Refer to last year's IB course (which has an excellent handout)...\n\n- ...and of course the internet\n\n- For an absolutely bare bones intro to Python try the first half of [this tutorial](https://cs231n.github.io/python-numpy-tutorial/)\n\n---\n\n## [computational-physics.tripos.org](https://computational-physics.tripos.org/)\n\n- Lecture notes\n- These slides\n- Code at [github.com/AustenLamacraft/part-ii-computational-physics](https://github.com/AustenLamacraft/part-ii-computational-physics)\n- Submit typos to the GH repo [issues](https://github.com/AustenLamacraft/part-ii-computational-physics/issues) and use [discussions](https://github.com/AustenLamacraft/part-ii-computational-physics/discussions) to discuss...\n\n---\n\n## Housekeeping\n\n- Eight lectures. Mondays & Wednesdays at 10.00 in the Ray Dolby Auditorium\n\n- After the lectures: __four computing exercises__ \n\n- Exercises count for 0.2 units or further work, or roughly 2% of your final mark for the year\n\n- Each exercise should only take you a few hours.\n\n---\n\n## Schedule\n\n\n- Six lectures, followed by one week break for first exercise starting 14th February\n\n  - First lecture: Monday 27th January\n  - Sixth lecture: Wednesday 12th February\n  - __First exercise__: Friday 14th February – Friday 21st February\n  - Seventh lecture: Monday 24th February\n  - Eighth lecture: Wednesday 26th February\n  - __Second exercise__: Friday 28th February – Friday 7th March\n  - __Third exercise__: Friday 7th March – Friday 14th March\n  - __Fourth exercise__: Friday 14th March – Friday 21st March (last day of full Lent term)\n\n---\n\n## Computing Project\n\n- You may choose to offer a Computational Physics project for one unit of further work\n\n- Choose a problem from the project list. Analyse the problem, write and test Python code to investigate it, then write up your work in a report\n\n- Project list will be published by 24th February\n\n- Deadline for submission of the project report is __16:00 on the first Monday of Full Easter term (5th May 2025)__\n\n# Getting going\n\n---\n\n## Finding your way\n\n- Everyone finds their own workflow for coding (language, editor, etc.)\n\n- This is a roundup of some popular tools in the Python ecosystem\n\n---\n\n## Your coding environment\n\n- You will need to install the Python language (or run online)\n\n- I recommend the [Anaconda distribution](https://www.anaconda.com/download)\n\n-  Comes with all parts of the toolkit we'll need such as [Jupyter notebooks](https://jupyter.org/) and the major libraries [NumPy](https://numpy.org/) and [SciPy](https://scipy.org/)\n\n---\n\n- Try running `python` at the command line\n\n- You should get something like\n\n```\nPython 3.12.7 | packaged by Anaconda, Inc. | (main, Oct  4 2024, 08:28:27) [Clang 14.0.6 ] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \n```\n\n- Confirm you are using Python 3 (the command `python3` will also work and guarantee this if you happen to have Python 2 as the default)\n\n---\n\n- Prompt `>>>` indicates that you have started the Python interactive shell or [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop) and are good to go:  \n\n::: {#9e25929c .cell execution_count=1}\n``` {.python .cell-code}\nprint(\"Hello world!\")\n1 + 2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world!\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n3\n```\n:::\n:::\n\n\n- To leave and return to command line, run `quit()` or `exit()`\n\n## IPython\n\n- If you the above with `python` nice colour scheme is absent\n\n- This is called [syntax highlighting](https://en.wikipedia.org/wiki/Syntax_highlighting) and provides a visual guide to the syntax of the language\n\n- [IPython](https://ipython.readthedocs.io/en/stable/) is an interactive shell that provides syntax highlighting and much more\n\n- If you have installed IPython (it comes with Anaconda) you can start it from the command line with `ipython`\n\n---\n\n## Helpful features of IPython: \n\n- Tab completion: hit `tab` to autocomplete. Particularly useful for viewing all properties or methods of an object:\n\n![](../assets/tab-complete-slow.gif){.border}\n\n- Typing `?obj` or `obj?` prints detailed information about the object `obj` (`??` provides additional detail)\n\n---\n\n-  _Magic commands_ prefixed by `%` provide additional functionality\n\n- `%timeit` finds the executation time of a single line statement, which is useful when profiling the performance of code:\n\n::: {#acb6c36c .cell execution_count=2}\n``` {.python .cell-code}\n%timeit L = [n ** 2 for n in range(1000)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n62.6 μs ± 3.24 μs per loop (mean ± std. dev. of 7 runs, 10,000 loops each)\n```\n:::\n:::\n\n\n- `%timeit` automatically runs several times to give statistics on execution time. For multiple lines you can use the `%%timeit` magic.\n\n- Much more in the [IPython documentation](https://ipython.readthedocs.io/en/stable/)\n\n---\n\n## Running a Python program \n\n- Python code in a file with a `.py` extension can be run from the command line with \n```\npython hello_world.py\n```\n  or \n\n```\npython -m hello_world\n``` \n\n- In the latter case `-m` option tells interpreter to look for a _module_ called `hello_world`\n\n---\n\n- From the IPython shell you can instead use \n\n```python\nrun hello_world.py\n```\nor just \n\n```python\nrun hello_world\n```\n\n---\n\n## Importing code\n\n- A Python [module](https://docs.python.org/3/tutorial/modules.html) is a file containing definition and statements\n\n- Breaking long code into modules is good practice for writing clear and reusable software\n\n- Users may not want to see the details of a function in order to be able to us it\n\n---\n\n- If I make the file `hello_world.py` containing the function:\n\n::: {#e2de97f7 .cell execution_count=3}\n``` {.python .cell-code}\ndef hello():\n    print(\"Hello world!\")\n```\n:::\n\n\n- I can run this function by first importing the module:\n\n::: {#4499781a .cell execution_count=4}\n``` {.python .cell-code}\nimport hello_world\nhello_world.hello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world!\n```\n:::\n:::\n\n\n- The function `hello` is accessed from the `hello_world` _namespace_\n\n- This is to avoid confusion if more than one imported module has a function of the same name\n\n---\n\n- If you are confident this is not an issue and want more concise code you can do this:\n\n::: {#4c95b3c1 .cell execution_count=5}\n``` {.python .cell-code}\nfrom hello_world import hello\nhello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world!\n```\n:::\n:::\n\n\n- or even import everything with the wildcard `*`:\n\n::: {#4c996ba0 .cell execution_count=6}\n``` {.python .cell-code}\nfrom hello_world import *\nhello()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHello world!\n```\n:::\n:::\n\n\n- The issue with the latter is that it may introduce a whole bunch of names that can interfere with things you already defined\n\n---\n\n## Packages\n\n- A collection of modules in a folder is called a _package_\n\n- You can import a package in the same way and access all the modules using the same `.` notation i.e. `package.module1`, `package.module2`, etc..\n\n- Since explicit namespaces are preferred to avoid ambiguity use shorthands for the package or module you are importing: \n\n::: {#416e9705 .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\nnp.arange(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```\n:::\n:::\n\n\n- (You can call it what you like, of course!) \n\n\n## Installing libraries\n\n- 99% of the code you run will have been written by somebody else in the form of a library \n\n- Package installation is handled by the command line utilities `pip` or `conda`, the latter being the package manager for the Anaconda distribution\n\n- If you have NumPy and SciPy installed you won't need to worry about this too much\n\n## Editors\n\n- Modern editors come with a huge number of tools that make writing code much easier\n\n- Syntax highlighting, code completion, parameter information and documentation popups as you type\n\n- These go under the general heading [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense)\n\n- Next come AI code assistants like [GitHub Copilot](https://github.com/features/copilot)\n\n- (Imo) these are all part of a continuum of productivity enhancements that enable people to write better code faster. Try them out!\n\n- I use [Visual Studio Code](https://code.visualstudio.com/)\n\n## Notebooks\n\n- Software developers write `.py` files, modules and packages\n\n- Scientists and others doing more exploratory work tend to favour a Notebook format that mixes code, text, and plots\n\n- Dominant option is [Jupyter notebook](https://jupyter-notebook.readthedocs.io/en/latest/), which comes with the Anaconda distribution\n\n- Start from command line with `jupyter notebook` (or from the Anaconda Navigator application)\n\n- Opens a notebook as a web page in your browser, where it can be edited and saved. The default extension is `.ipynb`\n\n---\n\n- Jupyter notebooks can run code in different languages, but the default process is IPython\n\n- Text cells can be formatted using [Markdown](https://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Working%20With%20Markdown%20Cells.html) and also support $\\LaTeX$ equations, which is pretty handy for us\n\n- Google has their own cloud version of the Jupyter notebook called [Colab](https://colab.research.google.com/)\n\n- Try it out for free, though you have to pay for significant compute\n\n- The \"next generation\" of the Jupyter notebook is called JupyterLab and can be started with `jupyter lab`\n\n- Notebook files can be opened in either JupyterLab or Jupyter Notebook\n\n\n<!-- ## Codespaces\n\nTODO \n\nNew from Github... -->\n\n",
    "supporting": [
      "getting-going_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {}
  }
}