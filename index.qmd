# Preface {.unnumbered}

These are the materials for the Part II Physics course Computational Physics, taught in Lent Term 2023 at the University of Cambridge. 

## Schedule

The course of eight Lectures will take place at 10.00 on Mondays and Fridays in the Pippard Lecture Theatre. After the lectures there will be four computing exercises to be completed in the last four weeks of full Lent term; one per week. Remember that the exercises count for 0.2 units or further work, or roughly 2% of your final mark for the year. Thus each exercise should only take you a few hours. 

The schedule is as follows

- First lecture: Monday 23th January
- Last lecture: Friday 17th February
- First exercise: Friday 17th February – Friday 24th February
- Second exercise: Friday 24th February – Friday 3rd March
- Third exercise: Friday 3rd March – Friday 10th March
- Fourth exercise: Friday 10th March – Friday 17th March (last day of full Lent term)

## Prerequisites

This course assumes a basic knowledge of the Python language, including variables, control flow, and writing and using functions, at the level of last year's IB course. 

## Learning outcomes

In this course you will learn

1. About the Python scientific stack (based on the NumPy library)
2. Its use in implementing some common algorithms in computational physics.
3. Basic ideas of computational complexity used in the analysis of algorithms

## Outline 

Here's a list of topics that I'd like to cover. We make not have time for all of them.

1. Setup. Running Python. Notebooks. Language overview
2. NumPy and friends
3. Floating point and all that
4. Soving differential equations with SciPy
5. Monte Carlo methods
6. Linear algebra with NumPy
7. Introduction to algorithms and complexity
8. The fast Fourier transform
9. Automatic differentiation 

<!-- 4. Numerical algos. SciPy
5. Other libraries. Pandas and scikit-learn. Kaggle
6. Algorithms and complexity. Simple Examples. FFT? Importance of...(see https://ieeexplore.ieee.org/document/814652). Matrix multiplication. Strassen and Alpha Tensor. Nice discussion in Nature of Computation
7. Types of algorithm e.g. divide and conquer, dynamic programming (at level of grokking algos book). Recursion. 
8. Random algorithms e.g. Monte Carlo. Inference.
9. Fun. Machine learning. Diffusion models
10. Software engineering principles. Version control. Tests
11. Acceleration. Numba, CuPy, etc. -->

<!-- Trebst's applications:
ODE, Monte Carlo simulation, data analysis, QM scattering, Linear algebra, Neural Nets

Refer to French book for more examples.

PCA as application of linear algebra and quantum mechanics

Random matrix theory
Linear regression

Linear programming.

FFT invented before Fourier

Garth Wells has nice material about algos and complexity
https://github.com/CambridgeEngineering/PartIA-Computing-Michaelmas/

Hashing


Numpy. Basics of ufuncs and vectorization 
2. Loading and saving data
3. Data types. Floating point. Machine precision
4. Implementing algos using vectorization (ODEs)
5. Numerical techniques: ODS, optimization
6. Computational complexity
	1. Complexity of simple algos. Division algorithm as binary search (Ryan O'Donnell tweet)
	2. Euler algorithm
	3. Complexity of linear algebra operations. Matrix-matrix and matrix-vector. Solving equations can be easier if matrices have structure see e.g. https://martin-thoma.com/solving-equations-of-upper-triangular-matrices/. This is forward   / backward substitution. 
	4. Strategies: divide and conquer (examples: exponentiation, Strassen, FFT)
	5. Monte Carlo and probabilistic methods
	6. Dynamic programming
7. Version control. GitHub. Pull requests. Code review. Look up some code in `scipy` -->

## These notes...

...were prepared using [Quarto](https://quarto.org/). Each chapter should be thought of as a Jupyter notebook (actually, they _are_ Jupyter notebooks), so you'll only see `import numpy as np` once in each chapter, for example. 

In several places I've used examples from an earlier version of the course by David Buscher.


