---
title: Course outline 
---

<!-- ::: {.callout-warning}
## Feedback

Please fill out the [feedback form](https://cambridge.eu.qualtrics.com/jfe/form/SV_9QSb24qEdt29kmq) before 12th March.
::: -->

These are the materials for the Part II Physics course Computational Physics, taught in Lent Term 2025 at the University of Cambridge.

# Schedule

The course of eight Lectures will take place at 10.00 on Mondays and Wednesdays in the Ray Dolby Auditorium in the Ray Dolby Centre. After the lectures there will be [four computing exercises](exercises/exercises.qmd) to be completed. The exercises count for 0.2 units or further work, or roughly 2% of your final mark for the year. Thus each exercise should only take you a few hours. 

There will be six lectures, followed by __a one week break__ for the first exercise starting Friday 14th February. The schedule is as follows:

- First lecture: Monday 27th January
- Sixth lecture: Wednesday 12th February
- __First exercise__: Friday 14th February – Friday 21st February
- Seventh lecture: Monday 24th February
- Eighth lecture: Wednesday 26th February
- __Second exercise__: Friday 28th February – Friday 7th March
- __Third exercise__: Friday 7th March – Friday 14th March
- __Fourth exercise__: Friday 14th March – Friday 21st March (last day of full Lent term)

## Computing Project

Additionally, you may choose to offer a [Computational Physics project](exercises/projects.qmd) for one unit of further work. This involves choosing a problem from the [project list](exercises/projects.qmd#sec-projects). You will analyse the problem, write and test Python code to investigate it, then write up your work in a report. 

Students may start their project work once the project list is published by 24th February. The deadline for submission of the project report is __16:00 on the first Monday of Full Easter term (5th May 2025)__. 

# Prerequisites

This course assumes a basic knowledge of the Python language, including variables, control flow, and writing and using functions, at the level of last year's IB course (which has an excellent handout). 

If you want an absolute bare bones intro to Python try the first half of [this tutorial](https://cs231n.github.io/python-numpy-tutorial/) (which then goes on to introduce NumPy).

# Learning outcomes

In this course you will learn

1. About the Python scientific stack (based on the NumPy library)
2. Its use in implementing some common algorithms in computational physics.
3. Basic ideas of computational complexity used in the analysis of algorithms

# Outline 

Here's a list of topics that I'd like to cover. We make not have time for all of them.

1. Setup. Running Python. Notebooks. Language overview
2. NumPy and friends
3. Floating point and all that
4. Soving differential equations with SciPy
5. Monte Carlo methods
6. Introduction to algorithms and complexity
7. The fast Fourier transform
8. Automatic differentiation 
9. Linear algebra with NumPy


<!-- 4. Numerical algos. SciPy
5. Other libraries. Pandas and scikit-learn. Kaggle
6. Algorithms and complexity. Simple Examples. FFT? Importance of...(see https://ieeexplore.ieee.org/document/814652). Matrix multiplication. Strassen and Alpha Tensor. Nice discussion in Nature of Computation
7. Types of algorithm e.g. divide and conquer, dynamic programming (at level of grokking algos book). Recursion. 
8. Random algorithms e.g. Monte Carlo. Inference.
9. Fun. Machine learning. Diffusion models
10. Software engineering principles. Version control. Tests
11. Acceleration. Numba, CuPy, etc. -->

<!-- Trebst's applications:
ODE, Monte Carlo simulation, data analysis, QM scattering, Linear algebra, Neural Nets

Refer to French book for more examples.

PCA as application of linear algebra and quantum mechanics

Random matrix theory
Linear regression

Linear programming.

FFT invented before Fourier

Garth Wells has nice material about algos and complexity
https://github.com/CambridgeEngineering/PartIA-Computing-Michaelmas/

Hashing

Books

Part IB notes are very good

Garth Wells

https://github.com/CambridgeEngineering/PartIA-Computing-Michaelmas/

Rougier

https://www.labri.fr/perso/nrougier/from-python-to-numpy/
https://github.com/rougier/scientific-visualization-book


Numpy. Basics of ufuncs and vectorization 
2. Loading and saving data
3. Data types. Floating point. Machine precision
4. Implementing algos using vectorization (ODEs)
5. Numerical techniques: ODS, optimization
6. Computational complexity
	1. Complexity of simple algos. Division algorithm as binary search (Ryan O'Donnell tweet)
	2. Euler algorithm
	3. Complexity of linear algebra operations. Matrix-matrix and matrix-vector. Solving equations can be easier if matrices have structure see e.g. https://martin-thoma.com/solving-equations-of-upper-triangular-matrices/. This is forward   / backward substitution. 
	4. Strategies: divide and conquer (examples: exponentiation, Strassen, FFT)
	5. Monte Carlo and probabilistic methods
	6. Dynamic programming
7. Version control. GitHub. Pull requests. Code review. Look up some code in `scipy` -->

## These notes...

...were prepared using [Quarto](https://quarto.org/). Each chapter should be thought of as a Jupyter notebook (actually, they _are_ Jupyter notebooks), so you'll probably only see `import numpy as np` once in each chapter, for example. 

The code used to generate this site is in [this GitHub repo](https://github.com/AustenLamacraft/part-ii-computational-physics). Please use [issues](https://github.com/AustenLamacraft/part-ii-computational-physics/issues) to submit any typos and [discussions](https://github.com/AustenLamacraft/part-ii-computational-physics/discussions) to discuss the content.

In several places I've used examples from an earlier version of the course by David Buscher.


