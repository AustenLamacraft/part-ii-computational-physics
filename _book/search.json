[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Part II Computational Physics",
    "section": "",
    "text": "Preface\nThere are the materials for the Part II Physics course Computational Physics, taught in Lent Term 2023 at the University of Cambridge\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "Computation is important for experimental physicists for analysing data. For theoretical physics, computation is used to deal with the awkward fact that physical theories are generally not tractable. You can’t solve Maxwell’s equations, the Navier–Stokes equation, or Schrödinger’s equation in any but the simplest situations. It’s important to understand that this need to apply our mathematical descriptions of nature in more general settings was the principal driving force behind the invention of the computer.\nMore than this,\nChurch Turing hypothesis\nTuring’s cathedral"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "6  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "setup.html#setting-up-an-environment",
    "href": "setup.html#setting-up-an-environment",
    "title": "2  Getting Going",
    "section": "2.1 Setting up an environment",
    "text": "2.1 Setting up an environment\nYou will need\n\nprint(\"Hello world!\")\n1 + 2\n\nHello world!\n\n\n3\n\n\nPython version. Make sure it’s Python3\nIPython code highlighting, help and so on.\nRunning a python program"
  },
  {
    "objectID": "setup.html#notebooks",
    "href": "setup.html#notebooks",
    "title": "2  Getting Going",
    "section": "2.8 Notebooks",
    "text": "2.8 Notebooks\nWhile software developers write .py files, modules and packages, scientists and others doing more exploratory work tend to favour a Notebook format that mixes code, text, and plots. The dominant option is the Jupyter notebook, which comes with the Anaconda distribution and can be started from the command line with jupyter notebook (or from the Anaconda Navigator application). This will open the notebook as a web page in your browser, where it can be edited and saved. The default extension is .ipynb.\nJupyter notebooks can actually run code in different languages (the processes running a particular language is called a kernel), but the default process is IPython with all the benefits described above.\nThe text cells can be formatted using Markdown and also support \\(\\LaTeX\\) equations, which is pretty handy for us.\nGoogle has their own cloud version of the Jupyter notebook called Colab. You can try it out for free, though you have to pay for significant compute. The “next generation” of the Jupyter notebook is called JupyterLab and can be started with jupyter lab. Notebook files can be opened in either Jupyter Lab or Jupyter Notebook"
  },
  {
    "objectID": "setup.html#plotting",
    "href": "setup.html#plotting",
    "title": "2  Getting Going",
    "section": "2.9 Plotting",
    "text": "2.9 Plotting\nWithout introducing numpy explicitly at this stage…\n\\(\\alpha = \\beta\\)"
  },
  {
    "objectID": "numpy.html",
    "href": "numpy.html",
    "title": "4  Introduction to NumPy",
    "section": "",
    "text": "NumPy is the key building block of the Python scientific ecosystem\nUfuncs"
  },
  {
    "objectID": "setup.html#the-python-language",
    "href": "setup.html#the-python-language",
    "title": "2  Getting Going",
    "section": "2.10 The Python Language",
    "text": "2.10 The Python Language\nObjects\ntwo language problem\nGotchas"
  },
  {
    "objectID": "setup.html#your-coding-environment",
    "href": "setup.html#your-coding-environment",
    "title": "2  Getting Going",
    "section": "2.2 Your coding environment",
    "text": "2.2 Your coding environment\nTo run Python code on your computer you will need to have installed the Python language. I recommend the Anaconda distribution as it comes with all the parts of the toolkit we’ll need such as Jupyter notebooks and the major libraries NumPy and SciPy.\nTry running python at the command line. You should get something like\nPython 3.9.12 (main, Apr  5 2022, 01:53:17) \n[Clang 12.0.0 ] :: Anaconda, Inc. on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> \nYou should confirm that you are using Python 3 (the command python3 will also work and guarantee this if you happen to have Python 2 as the default). The prompt >>> indicates that you have started the Python interactive shell or REPL and are good to go:\n\nprint(\"Hello world!\")\n1 + 2\n\nHello world!\n\n\n3\n\n\nTo leave and return to the command line, you can run quit() or exit()."
  },
  {
    "objectID": "setup.html#editors",
    "href": "setup.html#editors",
    "title": "2  Getting Going",
    "section": "2.7 Editors",
    "text": "2.7 Editors\nModern editors come with a huge number of tools that make writing code much easier, and you would be crazy not to take advantage of them. These range from the visual cues provided by syntax highlighting – which we’ve already met – to code completion, parameter information and documentation popups as you type. These go under the general heading IntelliSense. The latest hotness is GitHub Copilot, which uses AI to make code suggestions. In my view, these are all part of a continuum of productivity enhancements that enable people to write better code faster. Use them (wisely).\nI use Visual Studio Code."
  },
  {
    "objectID": "setup.html#installing-libraries",
    "href": "setup.html#installing-libraries",
    "title": "2  Getting Going",
    "section": "2.6 Installing libraries",
    "text": "2.6 Installing libraries\n99% of the code 1 you run will have been written by somebody else in the form of a library (a collection of modules or packages). Package installation is handled by the command line utilities pip or conda, the latter being the package manager for the Anaconda distribution. If you have NumPy and SciPy installed you won’t need to worry about this too much in this course."
  },
  {
    "objectID": "setup.html#running-a-python-program",
    "href": "setup.html#running-a-python-program",
    "title": "2  Getting Going",
    "section": "2.4 Running a Python program",
    "text": "2.4 Running a Python program\nPython code in a file with a .py extension can be run from the command line with python hello_world.py or python -m hello_world. In the latter case the -m option tells the interpreter to look for a module called hello_world. More on modules below.\nFrom the IPython shell you can instead use run hello_world.py or just run hello_world.\nTODO: These magics are normally documented with a %. When is it necessary?"
  },
  {
    "objectID": "setup.html#importing-code",
    "href": "setup.html#importing-code",
    "title": "2  Getting Going",
    "section": "2.5 Importing code",
    "text": "2.5 Importing code\nA Python module is just a file containing definition and statements. Breaking long code into modules is good practice for writing clear and reusable software. Users may not want to delve into the details of some function you have written in order to be able to us it, and separating the corresponding code into a separate file is a hygienic way to handle this.\nThus if I make the file hello_world.py containing the function:\n\ndef hello():\n    print(\"Hello world!\")\n\nI can run this function by first importing the module:\n\nimport hello_world\nhello_world.hello()\n\nHello world!\n\n\nNotice that the function hello is accessed from the hello_world namespace. This is to avoid any confusion that may arise if more that one imported module has a function of the same name. If you are confident that’s not an issue and want more concise code you can do this:\n\nfrom hello_world import hello\nhello()\n\nHello world!\n\n\nor even:\n\nfrom hello_world import *\nhello()\n\nHello world!\n\n\nThe issue with the latter is that it may introduce a whole bunch of names that may interfere with things you already defined.\nA collection of modules in a folder is called a package. You can import a package in the same way and access all the modules using the same . notation i.e. package.module1, package.module2, etc..\nSince explicit namespaces are preferred to avoid ambiguity it’s common to introduce shorthand names for the package or module you are importing, hence the ubiquitous:\n\nimport numpy as np\nnp.arange(10)\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n(You can call it what you like, of course!)\nFor details about where the interpreter looks to find modules you try and import are in the documentation."
  },
  {
    "objectID": "setup.html#finding-your-way",
    "href": "setup.html#finding-your-way",
    "title": "2  Getting Going",
    "section": "2.1 Finding your way",
    "text": "2.1 Finding your way\nEveryone finds their own workflow for coding, depending on their preferred language, editor, how they run their code, and so on. The aim of the sections below is to give a roundup of some popular tools in the Python ecosystem."
  },
  {
    "objectID": "setup.html#codespaces",
    "href": "setup.html#codespaces",
    "title": "2  Getting Going",
    "section": "2.9 Codespaces",
    "text": "2.9 Codespaces\nNew from Github…"
  },
  {
    "objectID": "setup.html#ipython",
    "href": "setup.html#ipython",
    "title": "2  Getting Going",
    "section": "2.3 IPython",
    "text": "2.3 IPython\nIf you ran the above command from within python you may have noticed that the nice colour scheme that you see above was absent. This is called syntax highlighting and provides a visual guide to the syntax of the language.\nIPython is an interactive shell that provides syntax highlighting and much more. If you have installed IPython (it comes with Anaconda) you can start it from the command line with ipython.\nAmong the most helpful features of IPython are:\n\nTab completion: hit tab to autocomplete. This is particularly useful for viewing all properties or methods of an object: \nTyping ?word or word? prints detailed information about an object (?? provides additional detail).\nCertain magic commands prefixed by % that provide certain additional functionality. For example, %timeit finds the executation time of a single line statement, which is useful when profiling the performance of code:\n\n\n%timeit L = [n ** 2 for n in range(1000)]\n\n224 µs ± 3.48 µs per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n\n\n%timeit automatically runs several times to give some statistics on the execution time. For multiple lines you can use the %%timeit magic.\nYou can find much more exploring the documentation."
  },
  {
    "objectID": "numbers.html",
    "href": "numbers.html",
    "title": "5  Floating point and all that",
    "section": "",
    "text": "Include RNGs here?\nSince physics is all about numbers we had better develop some understanding of how computers represent numbers, and what limitations this representations has.\nAs a motivating example\n\n0.1  + 0.2 == 0.3\n\nFalse"
  },
  {
    "objectID": "numpy.html#plotting",
    "href": "numpy.html#plotting",
    "title": "5  Introduction to NumPy and friends",
    "section": "5.4 Plotting",
    "text": "5.4 Plotting\nAnimation"
  },
  {
    "objectID": "numpy.html#dealing-with-data",
    "href": "numpy.html#dealing-with-data",
    "title": "5  Introduction to NumPy and friends",
    "section": "5.5 Dealing with data",
    "text": "5.5 Dealing with data\nSaving etc…."
  },
  {
    "objectID": "python.html",
    "href": "python.html",
    "title": "3  The Python Language",
    "section": "",
    "text": "Objects\ntwo language problem\nGotchas\nMutable and immutable"
  },
  {
    "objectID": "numpy.html#arrays",
    "href": "numpy.html#arrays",
    "title": "4  Introduction to NumPy and friends",
    "section": "4.2 Arrays",
    "text": "4.2 Arrays\nThe fundamental object in NumPy is the Array, which you can think of as a multidimensional version of a list. Let’s start with two dimensions to demonstrate:\n\nimport numpy as np\nmy_array = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n\n\ntype(my_array)\n\nnumpy.ndarray\n\n\nArrays can be indexed, similar to lists\n\nprint(my_array[0], my_array[1], my_array[3][1])\n\n[1 2 3] [4 5 6] 11\n\n\nbut – different from a ordinary list of lists – the last one can be much more pleasantly achieved with the syntax\n\nmy_array[3,1]\n\n11\n\n\nWe also have a generalization of the slice syntax\n\nmy_array[1:, 1:]\n\narray([[ 5,  6],\n       [ 8,  9],\n       [11, 12]])\n\n\nSlicing can be mixed with integer indexing\n\nmy_array[1:, 1]\n\narray([ 5,  8, 11])\n\n\nNumPy offers all sorts of fancy indexing options for slicing and dicing your data: see the documentation for details.\nA fundamental property of an array is its shape:\n\n# [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]\nmy_array.shape\n\n(4, 3)\n\n\nThe way to read off the shape of an array is as follows. To begin with you encounter a number of [ corresponding to the rank of the array (two in the above example). You then scan over a number of entries that give the rightmost (innermost) dimension in the shape tuple before closing ] (3 here). After a number of 1D arrays [...] equal to the next innermost dimension (4 here), we have another closing ], and so on.\nIt’s definitely something that will take a bit of time getting used to!\nNotice that slicing does not change the rank of the array\n\nmy_array[1:, 1:].shape\n\n(3, 2)\n\n\nbut integer indexing (which can be combined with slicing) does\n\nmy_array[1:, 1].shape\n\n(3,)\n\n\nNumPy has lots of methods to create arrays with a given shape and populated in different ways:\n\na = np.zeros((2,2))\nprint(a)\n\nb = np.ones((2,2))\nprint(b)\n\nc = np.full((2,2), 5)\nprint(c)\n\nd = np.random.random((2,2)) # random numbers uniformly in [0.0, 1.0)\nprint(d)\n\n[[0. 0.]\n [0. 0.]]\n[[1. 1.]\n [1. 1.]]\n[[5 5]\n [5 5]]\n[[0.80272808 0.64242486]\n [0.85253662 0.9894535 ]]\n\n\nA NumPy array has a dtype property that gives the datatype. If the array was created from data, this will be inferred\n\nmy_array.dtype\n\ndtype('int64')\n\n\nFunctions that construct arrays also have an optional argument to specify the datatype\n\nmy_float_array = np.array([1,2,3], dtype=np.float64)\nmy_float_array.dtype\n\ndtype('float64')"
  },
  {
    "objectID": "numpy.html#objects-in-python",
    "href": "numpy.html#objects-in-python",
    "title": "5  Introduction to NumPy and friends",
    "section": "5.1 Objects in Python",
    "text": "5.1 Objects in Python\nEverything in Python is an object. For example [1,2,3] is a list:\n\ntype([1,2,3])\n\nlist\n\n\n\ndir([1,2,3])\n\n['__add__',\n '__class__',\n '__class_getitem__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n\n\ndunder"
  },
  {
    "objectID": "numpy.html#preamble-objects-in-python",
    "href": "numpy.html#preamble-objects-in-python",
    "title": "4  Introduction to NumPy and friends",
    "section": "4.1 Preamble: objects in Python",
    "text": "4.1 Preamble: objects in Python\nEverything in Python is an object. For example [1,2,3] is a list:\n\nmy_list = [1, 2, 3]\ntype(my_list)\n\nlist\n\n\nYou can think of an object as a container for properties and methods, the latter being functions associated with the object. Properties and methods are accessed with the . syntax. For example, lists have the append method, which adds an element to the end of the list:\n\nmy_list.append(\"boop\")\nmy_list\n\n[1, 2, 3, 'boop']\n\n\nWith IPython you can see all the available methods by hitting tab:\n\n\n\n\n\n\n\nDunder methods\n\n\n\n\n\nYou can list all of an objects properties and methods using dir:\n\ndir(my_list)\n\n['__add__',\n '__class__',\n '__class_getitem__',\n '__contains__',\n '__delattr__',\n '__delitem__',\n '__dir__',\n '__doc__',\n '__eq__',\n '__format__',\n '__ge__',\n '__getattribute__',\n '__getitem__',\n '__gt__',\n '__hash__',\n '__iadd__',\n '__imul__',\n '__init__',\n '__init_subclass__',\n '__iter__',\n '__le__',\n '__len__',\n '__lt__',\n '__mul__',\n '__ne__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__reversed__',\n '__rmul__',\n '__setattr__',\n '__setitem__',\n '__sizeof__',\n '__str__',\n '__subclasshook__',\n 'append',\n 'clear',\n 'copy',\n 'count',\n 'extend',\n 'index',\n 'insert',\n 'pop',\n 'remove',\n 'reverse',\n 'sort']\n\n\nNotice that lots of these are methods have a name sandwiched between double underscores and for this reason are called dunder methods (or magic methods, or just special methods). This is to indicate that they are not to be used by you, but by the Python interpreter to implement certain standard functions that apply to many different classes of objects. For instance, when you write len(my_list) to find the length of my_list Python is actually calling the dunder method my_list.__len__ which does the job of actually finding the length.\n\nmy_list.__len__()\n\n4\n\n\nIn this way the same function (len in this case) can operate on many different objects, an example of what is called polymorphism in object oriented programming."
  },
  {
    "objectID": "numpy.html#mathematical-operations-with-arrays",
    "href": "numpy.html#mathematical-operations-with-arrays",
    "title": "4  Introduction to NumPy and friends",
    "section": "4.3 Mathematical operations with arrays",
    "text": "4.3 Mathematical operations with arrays\nNow here comes the payoff. On lists, multiplication by an integer concatentates multiple copies\n\n2 * [1, 2, 3]\n\n[1, 2, 3, 1, 2, 3]\n\n\nwhich is sometimes useful. But in numerical applications what we really want is this\n\n2 * np.array([1, 2, 3])\n\narray([2, 4, 6])\n\n\nThis illustrates a general feature of NumPy that all mathematical operations are performed elementwise on arrays!\n\nprint(np.array([1, 2, 3]) + np.array([4, 5, 6]))\nprint(np.array([1, 2, 3])**2)\nprint(np.sqrt(np.array([1, 2, 3])))\n\n[5 7 9]\n[1 4 9]\n[1.         1.41421356 1.73205081]\n\n\nThis avoids the need to write nested loops to perform some operation on each element of some multidimensional data. Of course, the loops are still there, it’s just that NumPy handles them in highly optimized C rather than Python. Code which operates in this way – rather than with explicit loops – is often described as vectorized, and in NumPy-speak vectorized functions are called ufuncs, short for universal functions (you can write your own if you need to). As a basic principle you should never use a Python loop to access your data in NumPy code. Loops may appear at a high level in stepping through time steps in a simulation, for example.\n\n4.3.1 Broadcasting\nVectorization is even more versatile than the above examples might suggest. Broadcasting is a powerful protocol that allows us to combine arrays of different shapes. Thus we can add a number to an array\n\nnp.array([1, 2, 3]) + 2.3\n\narray([3.3, 4.3, 5.3])\n\n\nMore generally, elementwise operations can be performed on two arrays of the same rank if in each dimension the sizes either match or one array has size 1.\n\n# These have shape (2, 3) and (1, 3)\nnp.array([[1, 2, 3], [4, 5, 6]]) + np.array([[4, 3, 2]])\n\narray([[5, 5, 5],\n       [8, 8, 8]])\n\n\nIn fact, we can simplify this last example\n\n# These have shape (2, 3) and (3,)\nnp.array([[1, 2, 3], [4, 5, 6]]) + np.array([4, 3, 2])\n\narray([[5, 5, 5],\n       [8, 8, 8]])\n\n\nBroadcasting two arrays follows these rules:\n\nIf the arrays do not have the same rank, prepend the shape of the lower rank array with 1s until both shapes have the same length.\nThe two arrays are said to be compatible in a dimension if they have the same size in the dimension, or if one of the arrays has size 1 in that dimension.\nThe arrays can be broadcast together if they are compatible in all dimensions. After broadcasting, each array behaves as if it had shape equal to the elementwise maximum of shapes of the two input arrays.\nIn any dimension where one array had size 1 and the other array had size greater than 1, the first array behaves as if it were copied along that dimension.\n\nThe documentation has more detail."
  },
  {
    "objectID": "numpy.html#plotting-with-matplotlib",
    "href": "numpy.html#plotting-with-matplotlib",
    "title": "4  Introduction to NumPy and friends",
    "section": "4.4 Plotting with Matplotlib",
    "text": "4.4 Plotting with Matplotlib\nThere are various specialized Python plotting libraries but the entry-level option is the catchily named Matplotlib. The pyplot module provides a plotting system that is similar to MATLAB (I’m told)\n\nimport matplotlib.pyplot as plt\n\nHere’s a simple example of the plot function, used to plot 2D data\n\n# Compute the x and y coordinates for points on a sine curve\nx = np.arange(0, 3 * np.pi, 0.1)\ny = np.sin(x)\n\n# Plot the points using matplotlib\nplt.plot(x, y)\nplt.show()\n\n\n\n\nNote: you must call plt.show() to make graphics appear. Here’s a fancier example with some labelling\n\n# Compute the x and y coordinates for points on sine and cosine curves\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Plot the points using matplotlib\nplt.plot(x, y_sin)\nplt.plot(x, y_cos)\nplt.xlabel('x axis label')\nplt.ylabel('y axis label')\nplt.title('Sine and Cosine')\nplt.legend(['Sine', 'Cosine'])\nplt.show()\n\n\n\n\nOften you’ll want to make several related plots and present them together, which can be achieved using the subplot function\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Compute the x and y coordinates for points on sine and cosine curves\nx = np.arange(0, 3 * np.pi, 0.1)\ny_sin = np.sin(x)\ny_cos = np.cos(x)\n\n# Set up a subplot grid that has height 2 and width 1,\n# and set the first such subplot as active.\nplt.subplot(2, 1, 1)\n\n# Make the first plot\nplt.plot(x, y_sin)\nplt.title('Sine')\n\n# Set the second subplot as active, and make the second plot.\nplt.subplot(2, 1, 2)\nplt.plot(x, y_cos)\nplt.title('Cosine')\n\n# Show the figure.\nplt.show()"
  },
  {
    "objectID": "numpy.html#saving-and-loading-data",
    "href": "numpy.html#saving-and-loading-data",
    "title": "4  Introduction to NumPy and friends",
    "section": "4.5 Saving and loading data",
    "text": "4.5 Saving and loading data\nIn the course of your work you are likely to produce, as well as consume lots of data. While it’s good practice to keep notebooks capable of reproducing any of your analyses, this could be time consuming and resource heavy for larger computations. Thus at some point you’ll probably want to save and load data. For example, after saving the data of a large scale simulation you’d like to load it and perform some analysis.\nNumPy comes with its own save and load functions and associated binary format .npy. The benefit of using these is that after loading you get back a NumPy array ready to be used.\nA related function savez allows several arrays to be saved and then loaded as a dictionary-like object."
  },
  {
    "objectID": "ode.html",
    "href": "ode.html",
    "title": "6  Solving differential equations with SciPy",
    "section": "",
    "text": "SciPy is"
  },
  {
    "objectID": "numbers.html#integers",
    "href": "numbers.html#integers",
    "title": "5  Floating point and all that",
    "section": "5.1 Integers",
    "text": "5.1 Integers\nLet’s begin with something simpler\n\n1 + 1 == 2\n\nTrue\n\n\nwhich is a bit more reassuring. Integers can be represented in binary\n\n3 == 0b11\n\nTrue\n\n\nor octal or hexadecimal (with a prefix 0o or 0h). You can get the binary string representing an integer using the bin function\n\nbin(-2)\n\n'-0b10'\n\n\nPython allows for arbitrarily large integers, so there is no possibility of overflow or rounding error\n\n2**100\n\n1267650600228229401496703205376\n\n\nThe only limitation is the memory required to store it.\nNumpy integers are a different story\n\nimport numpy as np\nnp.int64(2**100)\n\nOverflowError: Python int too large to convert to C long\n\n\nSince NumPy is using C the types have to play nicely. The range of integers that can be represented with 32 bit numpy.int32s is \\(\\approx\\pm 2^{31} \\approx \\pm 2.1 × 10^9\\) (one bit is for the sign) and 64 bit numpy.int64s is \\(\\approx\\pm 2^{63} \\approx \\pm 9.2 × 10^{18}\\)."
  },
  {
    "objectID": "numbers.html#floating-point-numbers",
    "href": "numbers.html#floating-point-numbers",
    "title": "5  Floating point and all that",
    "section": "5.2 Floating point numbers",
    "text": "5.2 Floating point numbers\nThe reason why \\(0.1 + 0.2 = 0.3\\) in Python is that specifying a real number exactly would involve an infinite number of bits, so that any finite representation is necessarily approximate."
  }
]